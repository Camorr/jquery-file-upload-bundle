{"tagline":"symfony2 bundle for the jquery-file-upload project from blueimp","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Jquery-file-upload-bundle","google":"","body":"JQueryFileUploadBundle\r\n======================\r\n\r\nIntroduction\r\n============\r\n\r\nThis library provides a symfony2 bundle for the [[BlueImp JQuery file uploader](https://github.com/blueimp/jQuery-File-Upload/)] package. See [[documentation](https://github.com/blueimp/jQuery-File-Upload/blob/master/README.md)]\r\n\r\nThis bundle is a fairly minimal wrapper because the existing PHP uploader class provided by BlueImp is very good already and does so many excellent things straight out of the box. We provided a way to integrate it into a Symfony 2 project.\r\n\r\nThis bundle started as a fork of the [symfony2-file-uploader-bundle](https://github.com/punkave/symfony2-file-uploader-bundle) from @punkave. I've made so many changes to the original fork that I just started a new bundle.\r\n\r\nNote on Internet Explorer\r\n=========================\r\n\r\nVersions of Internet Explorer prior to 10 have no support for multiple file uploads. However IE users will be able to add a single file at a time and will still be able to build a collection of attached files. \r\n\r\nRequirements\r\n============\r\n\r\n* Symfony2\r\n* jQuery\r\n* jQuery UI\r\n* Underscore\r\n\r\nInstallation\r\n============\r\n\r\n1) Add these package to your composer.json:\r\n```\r\n    \"require\":{\r\n        \"mylen/jquery-file-upload-bundle\":\"*\"\r\n    },\r\n    \"repositories\":[\r\n        {\r\n            \"type\":\"package\",\r\n            \"package\":{\r\n                \"version\":\"dev-master\",\r\n                \"name\":\"blueimp/jquery-file-upload\",\r\n                \"autoload\": {\r\n                    \"psr-0\": {\r\n                        \"UploadHandler\": \"server/php\"\r\n                    }\r\n                },\r\n                \"source\":{\r\n                    \"url\":\"https://github.com/blueimp/jQuery-File-Upload.git\",\r\n                    \"type\":\"git\",\r\n                    \"reference\":\"master\"\r\n                },\r\n                \"dist\":{\r\n                    \"url\":\"https://github.com/blueimp/jQuery-File-Upload/zipball/master\",\r\n                    \"type\":\"zip\"\r\n                }\r\n            }\r\n\t\t}\r\n    ]\r\n```\r\n\r\n2) Modify your AppKernel with the following line:\r\n```\r\n            new Mylen\\JQueryFileUploadBundle\\JQueryFileUploadBundle(),\r\n```\r\n\r\n3) Update composer\r\n```\r\n   php composer.phar update\r\n```\r\n4) Add these to your configuration file (app/config/config.yml)\r\n    - { resource: '@JQueryFileUploadBundle/Resources/config/parameters.yml' }\r\n    - { resource: '@JQueryFileUploadBundle/Resources/config/services.yml' }\r\n    - { resource: '@JQueryFileUploadBundle/Resources/config/filters.yml' }\r\n    - { resource: '@JQueryFileUploadBundle/Resources/config/assetic.yml' }\r\n\r\nYou are welcome to customize these files, just copy them in your app/config directory. As an exemple, you can restrict authorized file type. You can also bundle the CSS and JS files to your app CSS and JS; then remove the assetic.yml...\r\n\r\n5) install web assets\r\n```\r\nphp app/console assets:install web/\r\n```\r\n6) run assetic dump\r\n```\r\nphp app/console assetic:dump\r\n```\r\n\r\nUsage\r\n=====\r\n\r\nYou can use our templates like this:\r\n```\r\n    {% include \"JQueryFileUploadBundle:Default:templates.html.twig\" %}\r\n```\r\nor if you want to customize the view:\r\n```\r\n{% extends 'JQueryFileUploadBundle::templates.html.twig' %}\r\n{% block js_blueimp_form %}\r\n    <!--  TODO: change path -->\r\n    <form id=\"fileupload\" action=\"{{ path('default') }}\" method=\"POST\" {{ form_enctype(form) }}>\r\n        {{ form_widget(form) }}\r\n        {% include \"JQueryFileUploadBundle::form.html.twig\" %}\r\n        <button type=\"submit\" class=\"btn\">Save</button>\r\n    </form>\r\n{% endblock js_blueimp_form %}\r\n```\r\n\r\nIf you want to see how you can integrate these bundle into your app, I urge you to clone the [sandbox](https://github.com/mylen/jquery-file-upload-bundle). The sandbox integrate a configuration for vagrant so you can try it out of the box :o)\r\n\r\nIn the Upload Action\r\n====================\r\n\r\nIn addition to the regular edit action of your form, there must be an upload action to handle file uploads. This action will call the handleFileUpload method of the service to pass on the job to BlueImp's UploadHandler class. Since that class implements the entire REST response directly in PHP, the method does not return.\r\n\r\nHere is the upload action:\r\n\r\n    /**\r\n     *\r\n     * @Route(\"/upload\", name=\"upload\")\r\n     * @Template()\r\n     */\r\n    public function uploadAction()\r\n    {\r\n        $editId = $this->getRequest()->get('editId');\r\n        if (!preg_match('/^\\d+$/', $editId))\r\n        {\r\n            throw new Exception(\"Bad edit id\");\r\n        }\r\n\r\n        $this->get('mylen.file_uploader')->handleFileUpload(array('folder' => 'tmp/attachments/' . $editId));\r\n    }\r\n\r\nThis single action actually implements a full REST API in which the BlueImp UploadHandler class takes care of uploading as well as deleting files.\r\n\r\nAgain, handleFileUpload DOES NOT RETURN as the response is generated in native PHP by BlueImp's UploadHandler class.\r\n\r\nConfiguration Parameters\r\n========================\r\n\r\nSee `Resources/config/services.yml` in this bundle. You can easily decide what the parent folder of uploads will be and what file extensions are accepted, as well as what sizes you'd like image files to be automatically scaled to. \r\n\r\nThe `from_folder`, `to_folder`, and `folder` options seen above are all appended after `file_uploader.file_base_path` when dealing with files. \r\n\r\nIf `file_uploader.file_base_path` is set as follows (the default):\r\n\r\n    file_uploader.file_base_path: \"%kernel.root_dir%/../web/uploads\"\r\n\r\nAnd the `folder` option is set to `attachments/5` when calling `handleFileUpload`, then the uploaded files will arrive in:\r\n\r\n    /root/of/your/project/web/uploads/attachments/5/originals\r\n\r\nIf the only attached file for this posting is `botfly.jpg` and you have configured one or more image sizes for the `file_uploader.sizes` option (by default we provide several useful standard sizes), then you will see:\r\n\r\n    /root/of/your/project/web/uploads/photos/5/originals/botfly.jpg\r\n    /root/of/your/project/web/uploads/photos/5/thumbnail/botfly.jpg\r\n    /root/of/your/project/web/uploads/photos/5/medium/botfly.jpg\r\n    /root/of/your/project/web/uploads/photos/5/large/botfly.jpg\r\n\r\nSo all of these can be readily accessed via the following URLs:\r\n\r\n    /uploads/photos/5/originals/botfly.jpg\r\n\r\nAnd so on.\r\n\r\nThe original names and file extensions of the files uploaded are preserved as much as possible without introducing security risks. \r\n\r\nNotes\r\n=====\r\n\r\nThe uploader has been styled using Bootstrap conventions. If you have Bootstrap in your project, the uploader should look reasonably pretty out of the box.\r\n\r\nThe \"Choose Files\" button allows multiple select as well as drag and drop."}